name: Deploy School Club Management Platform to GitHub Pages

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout 📦
      uses: actions/checkout@v4

    - name: Setup Node.js 🔧
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Setup Pages 📄
      uses: actions/configure-pages@v4

    - name: Install Frontend Dependencies 📦
      run: |
        cd frontend
        npm ci

    - name: Build React App for School Club Platform 🏗️
      run: |
        cd frontend
        npm run build
      env:
        REACT_APP_API_URL: https://schoolclubplatform-8tozzxe1p.vercel.app/api
        PUBLIC_URL: /school-club-management

    - name: Upload artifact 📤
      uses: actions/upload-pages-artifact@v3
      with:
        path: './frontend/build'

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages 🚀
        id: deployment
        uses: actions/deploy-pages@v4        \lu new p\vercel.json
        {
          "version": 2,
          "builds": [
            {
              "src": "backend/server.js",
              "use": "@vercel/node",
              "config": {
                "maxLambdaSize": "50mb"
              }
            },
            {
              "src": "frontend/package.json",
              "use": "@vercel/static-build",
              "config": { 
                "distDir": "build",
                "buildCommand": "npm run build"
              }
            }
          ],
          "routes": [
            {
              "src": "/api/(.*)",
              "dest": "backend/server.js",
              "headers": {
                "Access-Control-Allow-Origin": "*",
                "Access-Control-Allow-Methods": "GET, POST, PUT, DELETE, OPTIONS",
                "Access-Control-Allow-Headers": "Content-Type, Authorization"
              }
            },
            {
              "src": "/static/(.*)",
              "dest": "frontend/build/static/$1"
            },
            {
              "src": "/(.*\\.(js|css|png|jpg|jpeg|gif|svg|ico|woff|woff2|ttf|eot|json))",
              "dest": "frontend/build/$1"
            },
            {
              "src": "/(.*)",
              "dest": "frontend/build/index.html"
            }
          ],
          "env": {
            "NODE_ENV": "production"
          },
          "functions": {
            "backend/server.js": {
              "maxDuration": 30
            }
          }
        }        \lu new p\vercel.json
        {
          "version": 2,
          "builds": [
            {
              "src": "backend/server.js",
              "use": "@vercel/node",
              "config": {
                "maxLambdaSize": "50mb"
              }
            },
            {
              "src": "frontend/package.json",
              "use": "@vercel/static-build",
              "config": { 
                "distDir": "build",
                "buildCommand": "npm run build"
              }
            }
          ],
          "routes": [
            {
              "src": "/api/(.*)",
              "dest": "backend/server.js",
              "headers": {
                "Access-Control-Allow-Origin": "*",
                "Access-Control-Allow-Methods": "GET, POST, PUT, DELETE, OPTIONS",
                "Access-Control-Allow-Headers": "Content-Type, Authorization"
              }
            },
            {
              "src": "/static/(.*)",
              "dest": "frontend/build/static/$1"
            },
            {
              "src": "/(.*\\.(js|css|png|jpg|jpeg|gif|svg|ico|woff|woff2|ttf|eot|json))",
              "dest": "frontend/build/$1"
            },
            {
              "src": "/(.*)",
              "dest": "frontend/build/index.html"
            }
          ],
          "env": {
            "NODE_ENV": "production"
          },
          "functions": {
            "backend/server.js": {
              "maxDuration": 30
            }
          }
        }        const express = require('express');
        const mongoose = require('mongoose');
        const cors = require('cors');
        const dotenv = require('dotenv');
        const path = require('path');
        
        // Import routes for School Club Management Platform
        const authRoutes = require('./routes/auth');
        const clubRoutes = require('./routes/clubs');
        const userRoutes = require('./routes/users');
        
        // Load environment variables
        dotenv.config();
        
        const app = express();
        const PORT = process.env.PORT || 5000;
        
        // CORS configuration for cross-origin requests
        const corsOptions = {
          origin: [
            'https://schoolclubplatform-8tozzxe1p.vercel.app',
            'https://dharmendrakr004.github.io',
            'http://localhost:3000'
          ],
          credentials: true,
          methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
          allowedHeaders: ['Content-Type', 'Authorization']
        };
        
        // Middleware
        app.use(cors(corsOptions));
        app.use(express.json({ limit: '10mb' }));
        app.use(express.urlencoded({ extended: true, limit: '10mb' }));
        
        // Health check route
        app.get('/api/health', (req, res) => {
          res.json({
            message: 'School Club & Organization Management Platform API is running!',
            status: 'healthy',
            timestamp: new Date().toISOString(),
            version: '1.0.0'
          });
        });
        
        // API Routes based on copilot instructions
        app.use('/api/auth', authRoutes);
        app.use('/api/clubs', clubRoutes);
        app.use('/api/users', userRoutes);
        
        // Root API route
        app.get('/api', (req, res) => {
          res.json({
            message: 'School Club & Organization Management Platform API',
            version: '1.0.0',
            status: 'running',
            endpoints: {
              auth: '/api/auth (POST /register, POST /login, GET /profile)',
              clubs: '/api/clubs (GET /, POST /, GET /:id, PUT /:id, POST /:id/join, POST /:id/leave)',
              users: '/api/users (GET /clubs, GET /managed-clubs, GET /dashboard)'
            },
            features: [
              'User registration and authentication (students and club leaders)',
              'Club directory with search functionality',
              'Club leader dashboard for managing clubs',
              'Member management system',
              'Announcements and updates'
            ]
          });
        });
        
        // Error handling middleware
        app.use((err, req, res, next) => {
          console.error('Error:', err.stack);
          res.status(500).json({
            message: 'Something went wrong!',
            error: process.env.NODE_ENV === 'production' ? 'Internal server error' : err.message
          });
        });
        
        // 404 handler
        app.use('*', (req, res) => {
          res.status(404).json({ 
            message: 'Route not found',
            path: req.originalUrl,
            availableEndpoints: ['/api', '/api/auth', '/api/clubs', '/api/users']
          });
        });
        
        // Connect to MongoDB and start server
        const startServer = async () => {
          try {
            // MongoDB connection
            await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/school-clubs', {
              useNewUrlParser: true,
              useUnifiedTopology: true,
            });
            
            console.log('✅ Connected to MongoDB');
            console.log('🎓 School Club Management Platform Database Ready');
            
            // Start server
            app.listen(PORT, () => {
              console.log(`🚀 School Club Management Server running on port ${PORT}`);
              console.log(`📱 API Base URL: http://localhost:${PORT}/api`);
              console.log('🎯 Ready for club discovery and management!');
            });
          } catch (error) {
            console.error('❌ MongoDB connection error:', error);
            process.exit(1);
          }
        };
        
        // For Vercel serverless deployment
        if (process.env.VERCEL) {
          mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/school-clubs', {
            useNewUrlParser: true,
            useUnifiedTopology: true,
          }).then(() => {
            console.log('✅ Connected to MongoDB (Vercel)');
          }).catch(err => {
            console.error('❌ MongoDB connection error (Vercel):', err);
          });
        } else {
          startServer();
        }
        
        module.exports = app;        const express = require('express');
        const router = express.Router();
        
        // Placeholder auth routes for School Club Management Platform
        router.post('/register', (req, res) => {
          res.json({
            message: 'User registration endpoint',
            note: 'This is a placeholder. Implement with MongoDB and bcrypt.',
            data: req.body
          });
        });
        
        router.post('/login', (req, res) => {
          res.json({
            message: 'User login endpoint',
            note: 'This is a placeholder. Implement with JWT authentication.',
            data: req.body
          });
        });
        
        router.get('/profile', (req, res) => {
          res.json({
            message: 'User profile endpoint',
            note: 'This is a placeholder. Implement with JWT verification.'
          });
        });
        
        module.exports = router;        const express = require('express');
        const router = express.Router();
        
        // Placeholder user routes for School Club Management Platform
        router.get('/clubs', (req, res) => {
          res.json({
            message: 'Get user joined clubs endpoint',
            clubs: [],
            note: 'This is a placeholder. Implement with MongoDB and JWT.'
          });
        });
        
        router.get('/managed-clubs', (req, res) => {
          res.json({
            message: 'Get user managed clubs endpoint',
            clubs: [],
            note: 'This is a placeholder. Implement with MongoDB and JWT.'
          });
        });
        
        router.get('/dashboard', (req, res) => {
          res.json({
            message: 'Get user dashboard data endpoint',
            data: {},
            note: 'This is a placeholder. Implement with MongoDB and JWT.'
          });
        });
        
        module.exports = router;